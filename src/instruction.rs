#[derive(Debug, Copy, Clone)]
pub enum InstructionKind {
    Break,
    NoOperation,
    Drop,
    Switch,
    Pick,
    Paste,
    Roll,
    Insert,
    FetchMemory,
    StoreMemory,
    Jump,
    Branch,
    SetInterruptFlag,
    SetInterruptAddress,
    Add,
    Subtract,
    AddWithCarry,
    SubtractWithBorrow,
    And,
    InclusiveOr,
    ExclusiveOr,
    ShiftLeft,
    ShiftRight,
    Equal,
    NotEqual,
}

pub fn get_instruction_kind(mnemonic: &str) -> Option<InstructionKind> {
    match mnemonic {
        "brk" => Some(InstructionKind::Break),
        "nop" => Some(InstructionKind::NoOperation),
        "drp" => Some(InstructionKind::Drop),
        "swc" => Some(InstructionKind::Switch),
        "pck" => Some(InstructionKind::Pick),
        "pst" => Some(InstructionKind::Paste),
        "rol" => Some(InstructionKind::Roll),
        "ins" => Some(InstructionKind::Insert),
        "fcm" => Some(InstructionKind::FetchMemory),
        "stm" => Some(InstructionKind::StoreMemory),
        "jmp" => Some(InstructionKind::Jump),
        "bnc" => Some(InstructionKind::Branch),
        "sif" => Some(InstructionKind::SetInterruptFlag),
        "sia" => Some(InstructionKind::SetInterruptAddress),
        "add" => Some(InstructionKind::Add),
        "sub" => Some(InstructionKind::Subtract),
        "adc" => Some(InstructionKind::AddWithCarry),
        "sbb" => Some(InstructionKind::SubtractWithBorrow),
        "and" => Some(InstructionKind::And),
        "ior" => Some(InstructionKind::InclusiveOr),
        "xor" => Some(InstructionKind::ExclusiveOr),
        "shl" => Some(InstructionKind::ShiftLeft),
        "shr" => Some(InstructionKind::ShiftRight),
        "equ" => Some(InstructionKind::Equal),
        "neq" => Some(InstructionKind::NotEqual),
        _ => None,
    }
}

pub fn get_opcode(instruction_kind: &InstructionKind) -> u8 {
    match instruction_kind {
        InstructionKind::Break => 0x00,
        InstructionKind::NoOperation => 0x10,
        InstructionKind::Drop => 0x30,
        InstructionKind::Switch => 0x40,
        InstructionKind::Pick => 0x41,
        InstructionKind::Paste => 0x42,
        InstructionKind::Roll => 0x50,
        InstructionKind::Insert => 0x51,
        InstructionKind::FetchMemory => 0x60,
        InstructionKind::StoreMemory => 0x61,
        InstructionKind::Jump => 0x70,
        InstructionKind::Branch => 0x71,
        InstructionKind::SetInterruptFlag => 0x80,
        InstructionKind::SetInterruptAddress => 0x81,
        InstructionKind::Add => 0x90,
        InstructionKind::Subtract => 0x91,
        InstructionKind::AddWithCarry => 0xa0,
        InstructionKind::SubtractWithBorrow => 0xa1,
        InstructionKind::And => 0xb0,
        InstructionKind::InclusiveOr => 0xb1,
        InstructionKind::ExclusiveOr => 0xb2,
        InstructionKind::ShiftLeft => 0xc0,
        InstructionKind::ShiftRight => 0xc1,
        InstructionKind::Equal => 0xd0,
        InstructionKind::NotEqual => 0xd1,
    }
}
